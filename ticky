#!/bin/bash

ticky_dir="${TICKY_DIR:-$HOME/.ticky}"
( umask 077 ; mkdir -p "$ticky_dir" )

config_file="${TICKY_CONFIG:-$ticky_dir/config}"
[ -r "$config_file" ] && . "$config_file"

login_file="${login_file:-$ticky_dir/.login}"
cookie_file="${cookie_file:-$ticky_dir/.cookie}"
backup_dir="${backup_dir:-$ticky_dir/backups}"
batch_file="${batch_file:-$ticky_dir/.batch}"
register_file="${register_file:-$ticky_dir/.register}"
deviceid_file="${deviceid_file:-$ticky_dir/.deviceid}"
task_file="${task_file:-$ticky_dir/.task}"

ticktick_web_app_version_claim="3880"
api_hostname="api.ticktick.com"
api_base="https://$api_hostname/api/v2/"
wss_url="wss://wss.ticktick.com/web"
cookie_expiry="2147483647"  # shoot me in 2038

websocket_reconnect_secs="5"

mongodb_endpoint="mongodb://localhost:27017/ticky"

function __gettoken {
	if type -t jq > /dev/null; then
		jq -r '.token' < "$login_file"
	else
		awk '{printf("%s%s", NR==1?"":" ", $0)}' < "$login_file" | sed -e 's/^.*"token":"//' -e 's/".*$//'
	fi
}

function __generate_cookie_file {
	(
		umask 077
		{
			echo -ne "$api_hostname\tFALSE\t/\tTRUE\t${cookie_expiry}\tt\t"
			__gettoken
		} > "$cookie_file"
	)
}

function _ticky_login {
	umask 077
	pass web/ticktick \
		| awk 'NR==1{p=$0} NR>2 && $1 == "Username:" {u=$2} END{printf("{\"username\":\"%s\",\"password\":\"%s\"}",u,p)}' \
		| curl --silent --show-error -d '@-' -H 'Content-Type: application/json' "$api_base"'user/signon?wc=true&remember=true' \
		> "$login_file"
	__generate_cookie_file
}

function _ticky_export {
	curl --silent --show-error --cookie "$cookie_file" "$api_base"'data/export' | jq -r .
}

function _ticky_backup {
	umask 077
	mkdir -p "$backup_dir"
	local file="$(date '+%Y%m%d-%H%M%S').csv"
	if _ticky_export > "$backup_dir/$file"; then
		xz "$backup_dir/$file"
	fi
}

function _generate_objectid {
	mongo --nodb --norc --quiet --eval 'print(ObjectId().str)'
}

function _get_deviceid {
	if [ ! -e "$deviceid_file" ]; then
		_generate_objectid > "$deviceid_file"
	fi
	deviceid="$(<"$deviceid_file")"
}

function _get_sessionid {
	sessionid="$(_generate_objectid)"
}

function _get_xdevice {
	_get_deviceid
	_get_sessionid
	xdevice='{"platform":"web","os":"Linux x86_64","device":"Chrome 88.0.4324.182","name":"","version":'"$ticktick_web_app_version_claim"',"id":"'"$deviceid"'","channel":"website","campaign":"","websocket":"'"$sessionid"'"}'
}

function _api_call_base {
	_get_xdevice
	curl --silent --show-error --cookie "$cookie_file" \
		-H "X-Device: $xdevice" \
		-H 'Accept: application/json, text/plain, */*' \
		-H 'Accept-Language: en-GB,en-US;q=0.9,en;q=0.8' \
		-H 'Origin: https://ticktick.com' \
		-H 'Referer: https://ticktick.com/' \
		-H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36' \
		"$@"
}

function _api_call_get {
	_api_call_base "$api_base$@"
}

function _api_call_post {
	_api_call_base -d '@-' -H 'Content-Type: application/json' -X POST "$api_base$@"
}


function _new_task {
	# ensure proper json quoting
	# unlike all the others, this one includes the surrounding " chars
	local title="$(jq -R -a . <<<"$1")"

	local defaultPriority="$(mongo --quiet "$mongodb_endpoint" --eval 'print(db.settings.findOne().defaultPriority)')"
	local priority="$defaultPriority"

	local sortOrder="$(date '+%s%N')"
	sortOrder="-${sortOrder%???}"

	local timeZone="$(mongo --quiet "$mongodb_endpoint" --eval 'print(db.settings.findOne().timeZone)')"

	local today="$(date "+%Y%m%d")"
	local startDate="$(TZ=UTC date -d 'TZ="'"$timeZone"'" '"$today"'' '+%Y-%m-%dT%H:%M:%S.000%z')"

	local inboxId="$(mongo --quiet "$mongodb_endpoint" --eval 'print(db.tasks.findOne( { _id: "inboxId" } ).inboxId)')"

	local createdTime="$(TZ=UTC date '+%Y-%m-%dT%H:%M:%S.000%z')"
	local modifiedTime="$createdTime"

	local id="$(_generate_objectid)"

	echo '{"items":[],"reminders":[],"exDate":[],"dueDate":null,"priority":'"$priority"',"isAllDay":true,"progress":0,"assignee":null,"sortOrder":'"$sortOrder"',"startDate":"'"$startDate"'","isFloating":false,"status":0,"projectId":"'"$inboxId"'","kind":null,"createdTime":"'"$createdTime"'","modifiedTime":"'"$modifiedTime"'","title":'"$title"',"tags":[],"timeZone":"'"$timeZone"'","content":"","id":"'"$id"'"}'
}


function _ticky_add {
	local newtask="$(_new_task "$1")"
	shift
	for i; do
		newtask="$newtask,$(_new_task "$i")"
	done

	local request='{"add":['"$newtask"'],"update":[],"delete":[]}'

	_api_call_post 'batch/task' <<<"$request" > "$task_file"
	cat "$task_file"; echo
}


function _ticky_sync {

	checkPoint="$(mongo --quiet "$mongodb_endpoint" --eval 'var c = db.tasks.find({_id:"checkPoint"}); c.hasNext() ? ((cp = c.next()).checkPoint ? cp.checkPoint : NumberLong("0")) : NumberLong("0")' | sed -e 's/^NumberLong("\?//' -e 's/"\?)$//')"

	if [ "$checkPoint" = "" -o "$checkPoint" = "0" ]; then
		# Full initial sync
		checkPoint=0
		# FIXME: get completed tasks
	fi

	_api_call_get 'batch/check/'"$checkPoint" \
		| tee "$batch_file" \
		| jq '
			def xjson($type; $field):
				if has($field) then ( .[$field] as $orig | .[$field] = {} | .[$field][$type] = $orig ) else . end
				;

			(
			.syncTaskBean.update[]
				| .["_id"] = .id | del(.id)
				| xjson("$oid"; "_id")
				| xjson("$oid"; "repeatTaskId")
				| xjson("$date"; "startDate")
				| xjson("$date"; "dueDate")
				| xjson("$date"; "repeatFirstDate")
				| xjson("$date"; "modifiedTime")
				| xjson("$date"; "createdTime")
				| xjson("$date"; "completedTime")
			)
			,

			{ "_id": "checkPoint", "checkPoint": .checkPoint }
			,

			if .inboxId != null then
				{ "_id": "inboxId", "inboxId": .inboxId }
			else
				empty
			end
		' \
		| mongoimport --quiet --mode=upsert --uri "$mongodb_endpoint" -c tasks
	local rc=$?
	if [ $rc -ne 0 ]; then
		echo "Error importing tasks: $rc"
	fi

	_api_call_get 'user/preferences/settings?includeWeb=true' \
		| tee "$batch_file".settings \
		| jq '.["_id"] = .id | del(.id)' \
		| mongoimport --quiet --mode=upsert --uri "$mongodb_endpoint" -c settings
	local rc=$?
	if [ $rc -ne 0 ]; then
		echo "Error importing settings: $rc"
	fi

	_api_call_get 'user/profile' \
		| tee "$batch_file".profile \
		| mongoimport --quiet --mode=upsert --uri "$mongodb_endpoint" -c profile
	local rc=$?
	if [ $rc -ne 0 ]; then
		echo "Error importing profile: $rc"
	fi

	# FIXME: do the upsert of all the stuff, and the update of checkPoint, in a transaction?

	# FIXME: what about .syncTaskBean.delete and .syncTaskBean.add?

	# FIXME: handle `projectProfiles` and `projectGroups`.

	# FIXME: handle `filters` (looks like they have embedded string mql?)

	# FIXME: handle `tags`

}

function _ticky_wait_for_push {
	echo 'connecting'
	(
		sleep 2
		while :; do
			echo hello
			sleep 9m
		done
	) \
	| websocat -t - "$wss_url" \
	| (
		while :; do
			echo 'listening'
			if read -r -t 600 line; then
				#echo line: $line
				case "$line" in
					'{'*'}')
						# json
						type="$(jq -r .type <<<"$line")"
						case "$type" in
							needSync)
								echo 'syncing (from push notification)'
								ticky sync
								;;
							habit)
								# ignore
								;;
							paymentUpdate)
								# ignore
								;;
							sn|team)
								# ignore
								;;
							remind)
								# ignore
								;;
							notification)
								# ignore
								;;
						esac
						;;
					*)
						# anything non-json is assumed to be the registration key
						local request='{ "pushToken": "'"$line"'", "osType": 41}'
						echo "registering $request"
						_api_call_post 'push/register' <<<"$request" > "$register_file"
						cat "$register_file"; echo
						;;
				esac
			else
				rc="$?"
				echo "read failed ($rc)"
				case "$rc" in
					142)
						#echo 'no line (timeout)'
						echo 'syncing (from timeout)'
						ticky sync
						;;
					130)
						echo 'read got sigint, user has interrupted with ^c'
						kill -USR1 $$
						exit
						;;
					1)
						echo 'eof, websocat has exited (connection lost)'
						kill -USR1 $$
						exit
						;;
				esac
			fi
		done
	)
}

function _ticky_monitor {
	echo 'syncing (initially)'
	_ticky_sync
	while :; do
		ticky wait_for_push
		rc="$?"
		case "$rc" in
			0|138)
				# normal exit (should be impossible), or sigusr1 => go around
				echo 'normal exit (connection lost), reconnecting'
				;;
			143|130)
				# sigterm or sigint => exit
				echo 'interrupted, exiting'
				break
				;;
			*)
				echo 'unknown error, exiting'
				break
				;;
		esac
		echo "connection lost ($rc), reconnecting in $websocket_reconnect_secs secs..."
		sleep "$websocket_reconnect_secs"
	done
}

function _ticky_list {
	mongo --quiet "$mongodb_endpoint" --eval '

		var lorem = {"1": ["a"], "2": ["ac", "ad", "at", "et", "eu", "id", "in", "mi", "ut"], "3": ["cum", "dui", "est", "leo", "mus", "nam", "nec", "non", "per", "sed", "sem", "sit", "vel"], "4": ["amet", "ante", "arcu", "cras", "diam", "eget", "elit", "erat", "eros", "nibh", "nisi", "nisl", "nunc", "odio", "orci", "pede", "quam", "quis", "urna", "xdis"], "5": ["augue", "class", "dolor", "donec", "etiam", "felis", "fusce", "ipsum", "justo", "lacus", "lorem", "magna", "massa", "metus", "morbi", "neque", "nulla", "proin", "purus", "risus", "velit", "vitae"], "6": ["aenean", "aptent", "auctor", "congue", "cursus", "lectus", "libero", "ligula", "litora", "luctus", "magnis", "mattis", "mauris", "mollis", "montes", "nostra", "nullam", "ornare", "sapien", "semper", "sociis", "taciti", "tellus", "tortor", "turpis", "varius"], "7": ["aliquam", "aliquet", "blandit", "commodo", "conubia", "dapibus", "egestas", "euismod", "feugiat", "gravida", "iaculis", "integer", "lacinia", "laoreet", "natoque", "posuere", "potenti", "pretium", "quisque", "sodales", "vivamus", "viverra"], "8": ["accumsan", "faucibus", "inceptos", "interdum", "nascetur", "pharetra", "placerat", "praesent", "pulvinar", "sagittis", "sociosqu", "suscipit", "torquent", "ultrices", "vehicula", "volutpat"], "9": ["consequat", "convallis", "curabitur", "dignissim", "elementum", "facilisis", "fermentum", "hendrerit", "himenaeos", "imperdiet", "malesuada", "penatibus", "phasellus", "porttitor", "ridiculus", "tincidunt", "tristique", "ultricies", "vulputate"], "10": ["adipiscing", "parturient", "vestibulum"], "11": ["condimentum", "scelerisque", "suspendisse", "ullamcorper"], "12": ["consectetuer", "pellentesque", "sollicitudin"], "max": 12};

		var wordmatcher = /([^A-Za-z]*)([A-Za-z]+)([^A-Za-z]*)/g;

		String.prototype.hashCode = function() {
		  var hash = 0, i, chr;
		  if (this.length === 0) return hash;
		  for (i = 0; i < this.length; i++) {
			chr   = this.charCodeAt(i);
			hash  = ((hash << 5) - hash) + chr;
			hash |= 0; // Convert to 32bit integer
		  }
		  return hash >>> 0;
		};

		function loremificate(s) {
			var m;
			var r = "";
			do {
				m = wordmatcher.exec(s);
				if (m) {
					var prefix = m[1];
					var word = m[2];
					var suffix = m[3];
					if ( ! word) {
						word = "";
					}
					thislen = word.length;
					if (thislen > 0) {
						if (thislen > lorem.max) {
							thislen = lorem.max;
						}
						newword = lorem[thislen][word.hashCode() % lorem[thislen].length];
						caps = [];
						for (i = 0; i < word.length; i++) {
							letter = word[i];
							if (letter >= "A" && letter <= "Z") {
								caps.push(i);
							}
						}
						word = newword;
						caps.forEach(i => {
							word = word.substr(0, i) + word[i].toUpperCase() + word.substr(i+1);
						});
					}
					r += prefix + word + suffix;
				}
			} while (m);
			return r;
		}



		var ESC = String.fromCharCode(0x1B);
		var normal = ESC + "[0000m";
		var red = ESC + "[1;31m";
		var green = ESC + "[0032m";
		var white = ESC + "[1;37m";
		var yellow = ESC + "[0033m";
		var NBSP = String.fromCharCode(0xA0);

		var inboxId = db.tasks.findOne( { _id: "inboxId" } ).inboxId;

		var query = '"$1"';
		var heading = "'"$2"'";
		var trailingBlankLine = '"${3:-false}"';
		var width = '"${4:-0}"';
		var first = true;
		var do_lorem = '"${TICKY_LOREM:-false}"';

		query.forEach(function (task) {
			var prefix = normal;
			var suffix = normal;
			if (first) {
				first = false;
				if (heading) {
					if (width > 0 && heading.length < width) {
						while (heading.length < width) {
							heading += " ";
						}
						heading += " ";
					}
					print(white + heading + NBSP + NBSP + normal);
				}
			}
			if (task.priority == 3) {
				prefix = yellow;
				suffix = normal;
			} else if (task.priority == 5) {
				prefix = red;
				suffix = normal;
			}
			//var bullet = "□";
			var bullet = "□";
			//var bullet = "▢";
			//var bullet = "x";
			if (task.kind == "CHECKLIST") {
				bullet = "▤";
				//bullet = "▣";
			}
			var title = task.title;
			title = title.replace(/\xA0/g, " ");
			if (do_lorem) {
				title = loremificate(title);
			}
			var leading = " " + bullet + " ";
			while (width > 0 && title.length > width) {
				var point = width;
				while (point > 0 && title.substr(point, 1) != " ") {
					point--;
				}
				if (point == 0) {
					point = width;
				}
				print(prefix + leading + title.substr(0, point) + suffix);
				while (point < title.length && title.substr(point, 1) == " ") {
					point++;
				}
				title = title.substr(point);
				leading = " " + NBSP + NBSP;
			}
			print(prefix + leading + title + suffix);
		});
		if (trailingBlankLine) {
			print(normal + NBSP + NBSP + normal);
		}
		'
}

function _ticky_date {
	_ticky_list 'db.tasks.aggregate( [
			{ $match: { projectId: inboxId, status: 0, deleted: 0, dueDate: { $exists: true } } },
			{ $addFields: { day: { $dateToString: { date: "$dueDate", format: "%Y%m%d", timezone: "$timeZone" } } } },
			{ $match: { day: '"$1"' } },
			{ $sort: { day: '"${5:-1}"', isAllDay: 1, dueDate: 1, priority: -1, sortOrder: 1 } },
			{ $project: { _id: 0, priority: 1, title: 1, dueDate: 1, kind: 1 } },
		] )' "$2" "$3" "$4"
}

function _ticky_today {
	_ticky_date "\"$(date "+%Y%m%d")\"" "TODAY" true "$1"
}

function _adjacent_day {
	date -d "@$(( $(date "+%s") + 86400 * $1 ))" "+%Y%m%d"
}

function _ticky_adjacent_day {
	_ticky_date "\"$(_adjacent_day "$1")\"" "$2" "$3" "$4"
}

function _ticky_tomorrow {
	_ticky_adjacent_day 1 "Tomorrow" true "$1"
}

function _ticky_yesterday {
	_ticky_adjacent_day -1 "Yesterday" true "$1"
}

function _ticky_day_before_yesterday {
	_ticky_adjacent_day -2 "Day Before Yesterday" true "$1"
}

function _ticky_earlier_this_week {
	_ticky_date "{ \$lte: \"$(_adjacent_day -2)\", \$gte: \"$(_adjacent_day -7)\" }" "Earlier this week" true "$1" -1
}

function _ticky_last_week {
	_ticky_date "{ \$lte: \"$(_adjacent_day -8)\", \$gte: \"$(_adjacent_day -14)\" }" "Last week" true "$1" -1
}

function _ticky_last_fortnight {
	_ticky_date "{ \$lte: \"$(_adjacent_day -8)\", \$gte: \"$(_adjacent_day -21)\" }" "Last fortnight" true "$1" -1
}

function _ticky_earlier {
	_ticky_date "{ \$lt: \"$(_adjacent_day -7)\" }" "Earlier" true "$1" -1
}

function _ticky_rest_of_week {
	_ticky_date "{ \$gte: \"$(_adjacent_day 2)\", \$lte: \"$(_adjacent_day 7)\" }" "Rest of week" true "$1" 1
}

function _ticky_next_week {
	_ticky_date "{ \$gte: \"$(_adjacent_day 8)\", \$lte: \"$(_adjacent_day 14)\" }" "Next week" true "$1" 1
}

function _ticky_later {
	_ticky_date "{ \$gt: \"$(_adjacent_day 7)\" }" "Later" true "$1"
}

function _ticky_overdue {
	_ticky_date "{ \$lt: \"$(date "+%Y%m%d")\" }" "Overdue" true "$1"
}

function _ticky_backlog {
	_ticky_list 'db.tasks.aggregate( [
			{ $match: { projectId: inboxId, status: 0, deleted: 0, dueDate: { $exists: false } } },
			{ $sort: { priority: -1, sortOrder: 1 } },
			{ $project: { _id: 0, priority: 1, title: 1, kind: 1 } },
		] )' "Backlog" true "$1"
}

function _ticky_summary {
	_ticky_day_before_yesterday "$1"
	_ticky_yesterday "$1"
	_ticky_today "$1"
	_ticky_tomorrow "$1"
}

_NL='
'
pad_blank_line="$(echo -ne '\e[0000m\ua0\ua0\e[0000m')"

function _ticky_full {

#  Backlog  |  Yesterday morning  |  Today morning      |  Rest of week (remaining 5 days)
#           |  Yesterday daytime  |  Today daytime      |
#           |  Yesterday evening  |  Today evening      |  Later (next week onwards)
#           |                     |                     |
#           |  Overdue            |  Tomorrow morning   |
#           |                     |  Tomorrow dayime    |
#           |                     |  Tomorrow evening   |

	local num_columns=4
	local width="${1:-$(( ${COLUMNS:-200} / $num_columns - 4 ))}"

	col0="$(_ticky_backlog "$width")"
	col1="$(_ticky_yesterday "$width" ; _ticky_earlier_this_week "$width" ; _ticky_earlier "$width")"
	col2="$(_ticky_today "$width" ; _ticky_tomorrow "$width")"
	col3="$(_ticky_rest_of_week "$width" ; _ticky_later "$width")"

	col0_width="$(awk '{if (m < length) m = length} END {print m}' <<<"$col0")"
	col1_width="$(awk '{if (m < length) m = length} END {print m}' <<<"$col1")"
	col2_width="$(awk '{if (m < length) m = length} END {print m}' <<<"$col2")"
	col3_width="$(awk '{if (m < length) m = length} END {print m}' <<<"$col3")"

	col0_lines="$(wc -l <<<"$col0")"
	col1_lines="$(wc -l <<<"$col1")"
	col2_lines="$(wc -l <<<"$col2")"
	col3_lines="$(wc -l <<<"$col3")"

	max_lines="$(echo -e "$col0_lines\n$col1_lines\n$col2_lines\n$col3_lines" | awk '{if (m < $1) m = $1} END {print m}')"

	local i
	for (( i = col0_lines ; i < max_lines ; i++ )); do
		col0="${col0}$_NL$pad_blank_line"
	done
	for (( i = col1_lines ; i < max_lines ; i++ )); do
		col1="${col1}$_NL$pad_blank_line"
	done
	for (( i = col2_lines ; i < max_lines ; i++ )); do
		col2="${col2}$_NL$pad_blank_line"
	done
	for (( i = col3_lines ; i < max_lines ; i++ )); do
		col3="${col3}$_NL$pad_blank_line"
	done

	paste <(cat <<<"$col0") <(cat <<<"$col1") <(cat <<<"$col2") <(cat <<<"$col3") | expand -t "$(( $col0_width + 3 )),$(( $col0_width + 3 + $col1_width + 3 )),$(( $col0_width + 3 + $col1_width + 3 + $col2_width + 3 ))"

}

function _ticky_all {

#  Yesterday morning  |  Today morning      |  Rest of week (remaining 5 days)
#  Yesterday daytime  |  Today daytime      |
#  Yesterday evening  |  Today evening      |  Later (next week onwards)
#                     |                     |
#  Overdue            |  Tomorrow morning   |
#                     |  Tomorrow dayime    |
#                     |  Tomorrow evening   |

	local num_columns=3
	local width="${1:-$(( ${COLUMNS:-200} / $num_columns - 4 ))}"

	col1="$(_ticky_yesterday "$width" ; _ticky_earlier_this_week "$width" ; _ticky_last_fortnight "$width")"
	col2="$(_ticky_today "$width" ; _ticky_tomorrow "$width")"
	col3="$(_ticky_rest_of_week "$width" ; _ticky_later "$width")"

	col1_width="$(awk '{if (m < length) m = length} END {print m}' <<<"$col1")"
	col2_width="$(awk '{if (m < length) m = length} END {print m}' <<<"$col2")"
	col3_width="$(awk '{if (m < length) m = length} END {print m}' <<<"$col3")"

	col1_lines="$(wc -l <<<"$col1")"
	col2_lines="$(wc -l <<<"$col2")"
	col3_lines="$(wc -l <<<"$col3")"

	max_lines="$(echo -e "$col1_lines\n$col2_lines\n$col3_lines" | awk '{if (m < $1) m = $1} END {print m}')"

	local i
	for (( i = col1_lines ; i < max_lines ; i++ )); do
		col1="${col1}$_NL$pad_blank_line"
	done
	for (( i = col2_lines ; i < max_lines ; i++ )); do
		col2="${col2}$_NL$pad_blank_line"
	done
	for (( i = col3_lines ; i < max_lines ; i++ )); do
		col3="${col3}$_NL$pad_blank_line"
	done

	paste <(cat <<<"$col1") <(cat <<<"$col2") <(cat <<<"$col3") | expand -t "$(( $col1_width + 3 )),$(( $col1_width + 3 + $col2_width + 3 ))"

}


function _ticky_watch {
	local args=()
	case "$1" in
		-n|--interval)
			args+=(--interval "$2")
			shift 2
			;;
	esac
	watch -t -c "${args[@]}" "$0" "$@"
}

function _ticky_ {
	_ticky_help "$@"
}

function _ticky_help {
	echo "Usage: ticky <fn> <args>"
	echo
	echo "Functions:"
	declare -F | sed -ne 's/^declare -f _ticky_\(.\)/  \1/p'
}

_ticky_"$@"

