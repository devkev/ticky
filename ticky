#!/bin/bash

ticky_dir="${TICKY_DIR:-$HOME/.ticky}"
( umask 077 ; mkdir -p "$ticky_dir" )

config_file="${TICKY_CONFIG:-$ticky_dir/config}"
[ -r "$config_file" ] && . "$config_file"

login_file="${login_file:-$ticky_dir/.login}"
cookie_file="${cookie_file:-$ticky_dir/.cookie}"
backup_dir="${backup_dir:-$ticky_dir/backups}"
batch_file="${batch_file:-$ticky_dir/.batch}"

api_hostname="api.ticktick.com"
api_base="https://$api_hostname/api/v2/"
cookie_expiry="2147483647"  # shoot me in 2038

mongodb_endpoint="mongodb://localhost:27017/ticky"

function __gettoken {
	if type -t jq > /dev/null; then
		jq -r '.token' < "$login_file"
	else
		awk '{printf("%s%s", NR==1?"":" ", $0)}' < "$login_file" | sed -e 's/^.*"token":"//' -e 's/".*$//'
	fi
}

function __generate_cookie_file {
	(
		umask 077
		{
			echo -ne "$api_hostname\tFALSE\t/\tTRUE\t${cookie_expiry}\tt\t"
			__gettoken
		} > "$cookie_file"
	)
}

function _ticky_login {
	umask 077
	pass web/ticktick \
		| awk 'NR==1{p=$0} NR>2 && $1 == "Username:" {u=$2} END{printf("{\"username\":\"%s\",\"password\":\"%s\"}",u,p)}' \
		| curl --silent --show-error -d '@-' -H 'Content-Type: application/json' "$api_base"'user/signon?wc=true&remember=true' \
		> "$login_file"
	__generate_cookie_file
}

function _ticky_export {
	curl --silent --show-error --cookie "$cookie_file" "$api_base"'data/export' | jq -r .
}

function _ticky_backup {
	umask 077
	mkdir -p "$backup_dir"
	local file="$(date '+%Y%m%d-%H%M%S').csv"
	if _ticky_export > "$backup_dir/$file"; then
		xz "$backup_dir/$file"
	fi
}

function _ticky_sync {

	checkPoint="$(mongo "$mongodb_endpoint" --quiet --eval 'var c = db.tasks.find({_id:"checkPoint"}); c.hasNext() ? ((cp = c.next()).checkPoint ? cp.checkPoint : NumberLong("0")) : NumberLong("0")' | sed -e 's/^NumberLong("\?//' -e 's/"\?)$//')"

	if [ "$checkPoint" = "" -o "$checkPoint" = "0" ]; then
		# Full initial sync
		checkPoint=0
		# FIXME: get completed tasks
	fi

	curl --silent --show-error --cookie "$cookie_file" "$api_base"'batch/check/'"$checkPoint" \
		| tee "$batch_file" \
		| jq '
			def xjson($type; $field):
				if has($field) then ( .[$field] as $orig | .[$field] = {} | .[$field][$type] = $orig ) else . end
				;

			(
			.syncTaskBean.update[]
				| .["_id"] = .id | del(.id)
				| xjson("$oid"; "_id")
				| xjson("$oid"; "repeatTaskId")
				| xjson("$date"; "startDate")
				| xjson("$date"; "dueDate")
				| xjson("$date"; "repeatFirstDate")
				| xjson("$date"; "modifiedTime")
				| xjson("$date"; "createdTime")
				| xjson("$date"; "completedTime")
			)
			,

			{ "_id": "checkPoint", "checkPoint": .checkPoint }
			,

			if .inboxId != null then
				{ "_id": "inboxId", "inboxId": .inboxId }
			else
				empty
			end
		' \
		| mongoimport --quiet --mode=upsert --uri "$mongodb_endpoint" -c tasks

	# FIXME: do the upsert of all the stuff, and the update of checkPoint, in a transaction?

	# FIXME: what about .syncTaskBean.delete and .syncTaskBean.add?

	# FIXME: handle `projectProfiles` and `projectGroups`.

	# FIXME: handle `filters` (looks like they have embedded string mql?)

	# FIXME: handle `tags`

}

function _ticky_date {
	mongo "$mongodb_endpoint" --quiet --eval '
		var targetdate = "'"$1"'";
		var heading = "'"$2"'";
		var first = true;

		var ESC = String.fromCharCode(0x1B);
		var red = ESC + "[31;1m";
		var green = ESC + "[32m";
		var normal = ESC + "[0m";
		var yellow = ESC + "[33m";

		var inboxId = db.tasks.findOne( { _id: "inboxId" } ).inboxId;

		db.tasks.aggregate( [
			{ $match: { projectId: inboxId, status: 0, deleted: 0, dueDate: { $exists: true } } },
			{ $addFields: { day: { $dateToString: { date: "$dueDate", format: "%Y%m%d", timezone: "$timeZone" } } } },
			{ $match: { day: targetdate } },
			{ $sort: { isAllDay: 1, dueDate: 1, priority: 1, sortOrder: 1 } },
			{ $project: { _id: 0, priority: 1, title: 1, dueDate: 1 } },
		] ).forEach(function (task) {
			if (first) {
				first = false;
				print(heading);
			}
			var prefix = "";
			suffix = "";
			if (task.priority == 3) {
				prefix += yellow;
				suffix += normal;
			} else if (task.priority == 5) {
				prefix += red;
				suffix += normal;
			}
			print(prefix + " â–¡ " + task.title + suffix);
		});
		if (!first) print();
		'
}

function _ticky_today {
	_ticky_date "$(date "+%Y%m%d")" "TODAY"
}

function _ticky_adjacent_day {
	_ticky_date "$(date -d "@$(( $(date "+%s") + 86400 * $1 ))" "+%Y%m%d")" "$2"
}

function _ticky_tomorrow {
	_ticky_adjacent_day 1 "Tomorrow"
}

function _ticky_yesterday {
	_ticky_adjacent_day -1 "Yesterday"
}

function _ticky_overdue {
	echo "Overdue"
	# FIXME
}

function _ticky_backlog {
	echo "Backlog"
	# FIXME
}

function _ticky_summary {
	_ticky_yesterday
	_ticky_today
	_ticky_tomorrow
}


function _ticky_ {
	_ticky_help "$@"
}

function _ticky_help {
	echo "Usage: ticky <fn> <args>"
	echo
	echo "Functions:"
	declare -F | sed -ne 's/^declare -f _ticky_\(.\)/  \1/p'
}

_ticky_"$@"

