#!/usr/bin/env python3

import urwid
import pymongo
from datetime import datetime, timedelta

mongo = pymongo.MongoClient('mongodb://localhost:27017/ticky')
db = mongo.get_default_database()

inboxId = db.tasks.find_one( { '_id': 'inboxId' } )['inboxId']
#print(inboxId)


class PlainButton(urwid.Button):
    # still has a space char on the left/right of the button. good enough for now.
    button_left = urwid.Text('')
    button_right = urwid.Text('')

class Model(dict):
    """
    A simple model that wraps mongodb document
    """
    __getattr__ = dict.get
    __delattr__ = dict.__delitem__
    __setattr__ = dict.__setitem__

class Task(Model):
    def __str__(self):
        #bullet = "□"
        bullet = "□"
        #bullet = "▢"
        #bullet = "x"
        if self.kind == "CHECKLIST":
            bullet = "▤"
            #bullet = "▣"
        return f' {bullet} {self.title}'

    def create_widget(self):
        priority = None
        if self.priority == 3:
            priority = 'priority_medium'
        elif self.priority == 5:
            priority = 'priority_high'
        button = PlainButton(str(self))
        urwid.connect_signal(button, 'click', item_chosen, self)
        return urwid.AttrMap(button, priority, focus_map='reversed_'+priority)



def show_list(heading, tasks, trailing_blank_line=False, width=0):
    first = True
    for task in tasks:
        if first:
            first = False
            if heading:
                print(heading)
        print(str(task))
    if trailing_blank_line:
        print()


def day(day_delta=0):
    return (datetime.today() + timedelta(days=day_delta)).strftime('%Y%m%d')

def query_day(day, sort=1):
    return map(Task, db.tasks.aggregate( [
            { '$match': { 'projectId': inboxId, 'status': 0, 'deleted': 0, 'dueDate': { '$exists': True } } },
            { '$addFields': { 'day': { '$dateToString': { 'date': '$dueDate', 'format': '%Y%m%d', 'timezone': '$timeZone' } } } },
            { '$match': { 'day': day } },
            { '$sort': { 'day': sort, 'isAllDay': 1, 'dueDate': 1, 'priority': -1, 'sortOrder': 1 } },
            { '$project': { '_id': 0, 'priority': 1, 'title': 1, 'dueDate': 1, 'kind': 1 } },
        ] ))



#show_list("TODAY", query_day(todays_day()), trailing_blank_line=True)


palette = [
        ('reversed', 'standout', ''),
        ('heading', 'bold, white', 'black'),
        ('priority_medium', 'bold, brown', 'black'),
        ('priority_high', 'bold, dark red', 'black'),
        ('reversed_priority_medium', 'bold, white', 'dark gray'),
        ('reversed_priority_high', 'bold, white', 'dark red'),
    ]

def build_menu(title, choices):
    this_menu = [urwid.Text(('heading',title))]
    for c in choices:
        this_menu.append(c.create_widget())
    return this_menu

def item_chosen(button, choice):
    response = urwid.Text([u'You chose ', repr(choice), u'\n'])
    done = urwid.Button(u'Ok')
    urwid.connect_signal(done, 'click', exit_program)
    main.original_widget = urwid.Filler(urwid.Pile([response,
        urwid.AttrMap(done, None, focus_map='reversed')]))

def exit_program(button):
    raise urwid.ExitMainLoop()


body = []
body += build_menu(u'YESTERDAY', query_day(day(-1)))
body.append(urwid.Divider())
body += build_menu(u'TODAY', query_day(day()))
body.append(urwid.Divider())
body += build_menu(u'TOMORROW', query_day(day(1)))
main = urwid.Padding(urwid.ListBox(urwid.SimpleFocusListWalker(body)), left=0, right=0)

#top = urwid.Overlay(main, urwid.SolidFill(u'\N{MEDIUM SHADE}'),
#    align='center', width=('relative', 100),
#    valign='middle', height=('relative', 100),
#    min_width=10, min_height=9)
#urwid.MainLoop(top, palette=[('reversed', 'standout', '')]).run()
urwid.MainLoop(main, palette).run()



