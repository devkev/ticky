#!/usr/bin/env python3

import urwid
import pymongo
from datetime import datetime

mongo = pymongo.MongoClient('mongodb://localhost:27017/ticky')
db = mongo.get_default_database()

inboxId = db.tasks.find_one( { '_id': 'inboxId' } )['inboxId']
#print(inboxId)


class Model(dict):
    """
    A simple model that wraps mongodb document
    """
    __getattr__ = dict.get
    __delattr__ = dict.__delitem__
    __setattr__ = dict.__setitem__

class Task(Model):
    def __str__(self):
        #bullet = "□"
        bullet = "□"
        #bullet = "▢"
        #bullet = "x"
        if self.kind == "CHECKLIST":
            bullet = "▤"
            #bullet = "▣"
        return f' {bullet} {self.title}'



def show_list(heading, tasks, trailing_blank_line=False, width=0):
    first = True
    for task in tasks:
        if first:
            first = False
            if heading:
                print(heading)
        print(str(task))
    if trailing_blank_line:
        print()


def todays_day():
    return datetime.today().strftime('%Y%m%d')

def query_day(day, sort=1):
    return map(Task, db.tasks.aggregate( [
            { '$match': { 'projectId': inboxId, 'status': 0, 'deleted': 0, 'dueDate': { '$exists': True } } },
            { '$addFields': { 'day': { '$dateToString': { 'date': '$dueDate', 'format': '%Y%m%d', 'timezone': '$timeZone' } } } },
            { '$match': { 'day': day } },
            { '$sort': { 'day': sort, 'isAllDay': 1, 'dueDate': 1, 'priority': -1, 'sortOrder': 1 } },
            { '$project': { '_id': 0, 'priority': 1, 'title': 1, 'dueDate': 1, 'kind': 1 } },
        ] ))



#show_list("TODAY", query_day(todays_day()), trailing_blank_line=True)


def menu(title, choices):
    #body = [urwid.Text(title), urwid.Divider()]
    body = [urwid.Text(title)]
    for c in choices:
        button = urwid.Button(str(c))
        urwid.connect_signal(button, 'click', item_chosen, c)
        body.append(urwid.AttrMap(button, None, focus_map='reversed'))
    return urwid.ListBox(urwid.SimpleFocusListWalker(body))

def item_chosen(button, choice):
    response = urwid.Text([u'You chose ', repr(choice), u'\n'])
    done = urwid.Button(u'Ok')
    urwid.connect_signal(done, 'click', exit_program)
    main.original_widget = urwid.Filler(urwid.Pile([response,
        urwid.AttrMap(done, None, focus_map='reversed')]))

def exit_program(button):
    raise urwid.ExitMainLoop()

main = urwid.Padding(menu(u'TODAY', query_day(todays_day())), left=2, right=2)
top = urwid.Overlay(main, urwid.SolidFill(u'\N{MEDIUM SHADE}'),
    align='center', width=('relative', 60),
    valign='middle', height=('relative', 60),
    min_width=20, min_height=9)
urwid.MainLoop(top, palette=[('reversed', 'standout', '')]).run()



