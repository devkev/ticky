#!/usr/bin/env python3

import urwid
import pymongo
from datetime import datetime, timedelta
import re
import hashlib
import os


lorem = {1: ['a'], 2: ['ac', 'ad', 'at', 'et', 'eu', 'id', 'in', 'mi', 'ut'], 3: ['cum', 'dui', 'est', 'leo', 'mus', 'nam', 'nec', 'non', 'per', 'sed', 'sem', 'sit', 'vel'], 4: ['amet', 'ante', 'arcu', 'cras', 'diam', 'eget', 'elit', 'erat', 'eros', 'nibh', 'nisi', 'nisl', 'nunc', 'odio', 'orci', 'pede', 'quam', 'quis', 'urna', 'xdis'], 5: ['augue', 'class', 'dolor', 'donec', 'etiam', 'felis', 'fusce', 'ipsum', 'justo', 'lacus', 'lorem', 'magna', 'massa', 'metus', 'morbi', 'neque', 'nulla', 'proin', 'purus', 'risus', 'velit', 'vitae'], 6: ['aenean', 'aptent', 'auctor', 'congue', 'cursus', 'lectus', 'libero', 'ligula', 'litora', 'luctus', 'magnis', 'mattis', 'mauris', 'mollis', 'montes', 'nostra', 'nullam', 'ornare', 'sapien', 'semper', 'sociis', 'taciti', 'tellus', 'tortor', 'turpis', 'varius'], 7: ['aliquam', 'aliquet', 'blandit', 'commodo', 'conubia', 'dapibus', 'egestas', 'euismod', 'feugiat', 'gravida', 'iaculis', 'integer', 'lacinia', 'laoreet', 'natoque', 'posuere', 'potenti', 'pretium', 'quisque', 'sodales', 'vivamus', 'viverra'], 8: ['accumsan', 'faucibus', 'inceptos', 'interdum', 'nascetur', 'pharetra', 'placerat', 'praesent', 'pulvinar', 'sagittis', 'sociosqu', 'suscipit', 'torquent', 'ultrices', 'vehicula', 'volutpat'], 9: ['consequat', 'convallis', 'curabitur', 'dignissim', 'elementum', 'facilisis', 'fermentum', 'hendrerit', 'himenaeos', 'imperdiet', 'malesuada', 'penatibus', 'phasellus', 'porttitor', 'ridiculus', 'tincidunt', 'tristique', 'ultricies', 'vulputate'], 10: ['adipiscing', 'parturient', 'vestibulum'], 11: ['condimentum', 'scelerisque', 'suspendisse', 'ullamcorper'], 12: ['consectetuer', 'pellentesque', 'sollicitudin'], 'max': 12}

wordmatcher = re.compile(r'([^A-Za-z]*)([A-Za-z]*)')

do_lorem = os.environ.get("TICKY_LOREM", "false") == "true"

def loremificate(line):
    r = ""
    #print(re.findall(wordmatcher, line))
    for (prefix, word) in re.findall(wordmatcher, line):
        thislen = len(word)
        if thislen > 0:
            if thislen > lorem['max']:
                thislen = lorem['max']
            #newword = random.choice(lorem[len(word)])
            newword = lorem[thislen][int(hashlib.sha1(word.encode('utf-8')).hexdigest(), 16) % len(lorem[thislen])]
            caps = []
            for i in range(len(word)):
                letter = word[i]
                if letter >= 'A' and letter <= 'Z':
                    caps.append(i)
            word = newword
            for i in caps:
                word = word[:i] + word[i].upper() + word[i+1:]
        r += prefix + word
    return r


mongo = pymongo.MongoClient('mongodb://localhost:27017/ticky')
db = mongo.get_default_database()

inboxId = db.tasks.find_one( { '_id': 'inboxId' } )['inboxId']
#print(inboxId)

urwid.Widget._command_map['j'] = urwid.CURSOR_DOWN
urwid.Widget._command_map['k'] = urwid.CURSOR_UP
urwid.Widget._command_map['h'] = urwid.CURSOR_LEFT
urwid.Widget._command_map['l'] = urwid.CURSOR_RIGHT
urwid.Widget._command_map['ctrl b'] = urwid.CURSOR_PAGE_UP
urwid.Widget._command_map['ctrl f'] = urwid.CURSOR_PAGE_DOWN
urwid.Widget._command_map['0'] = urwid.CURSOR_MAX_LEFT
urwid.Widget._command_map['$'] = urwid.CURSOR_MAX_RIGHT

class PlainButton(urwid.Text):
    ignore_focus = False
    _selectable = True

class TaskWidget(urwid.WidgetWrap):
    ignore_focus = False
    _selectable = True

    def sizing(self):
        return frozenset([FLOW])

    def __init__(self, task):
        self.__super.__init__(None)
        self._task = task
        self._button = PlainButton(str(self._task))
        self._w = urwid.AttrMap(self._button, self._priority(), focus_map='focused_'+self._priority())

    def _priority(self):
        priority = None
        if self._task.priority == 3:
            priority = 'medium'
        elif self._task.priority == 5:
            priority = 'high'
        if self._task.selected:
            priority = 'selected_' + priority
        return priority

    def toggle_selection(self):
        self._task.selected = not self._task.selected
        self._button.set_text(str(self._task))
        self._w = urwid.AttrMap(self._button, self._priority(), focus_map='focused_'+self._priority())

    def keypress(self, size, key):
        if self._command_map[key] == urwid.ACTIVATE:
            self.toggle_selection()
        else:
            return key

TaskWidget._command_map['t'] = urwid.ACTIVATE


class Model(dict):
    """
    A simple model that wraps mongodb document
    """
    __getattr__ = dict.get
    __delattr__ = dict.__delitem__
    __setattr__ = dict.__setitem__

class Task(Model):
    def __str__(self):
        #bullet = "□"
        bullet = "□"
        #bullet = "▢"
        #bullet = "x"
        if self.kind == "CHECKLIST":
            bullet = "▤"
            #bullet = "▣"
        if self.selected:
            bullet = "*"
        title = self.title
        if do_lorem:
            title = loremificate(title)
        return f' {bullet} {title}'



def show_list(heading, tasks, trailing_blank_line=False, width=0):
    first = True
    for task in tasks:
        if first:
            first = False
            if heading:
                print(heading)
        print(str(task))
    if trailing_blank_line:
        print()


def day(day_delta=0):
    return (datetime.today() + timedelta(days=day_delta)).strftime('%Y%m%d')

def query_day(day, sort=1):
    return map(Task, db.tasks.aggregate( [
            { '$match': { 'projectId': inboxId, 'status': 0, 'deleted': 0, 'dueDate': { '$exists': True } } },
            { '$addFields': { 'day': { '$dateToString': { 'date': '$dueDate', 'format': '%Y%m%d', 'timezone': '$timeZone' } } } },
            { '$match': { 'day': day } },
            { '$sort': { 'day': sort, 'isAllDay': 1, 'dueDate': 1, 'priority': -1, 'sortOrder': 1 } },
            { '$project': { '_id': 0, 'priority': 1, 'title': 1, 'dueDate': 1, 'kind': 1 } },
        ] ))



#show_list("TODAY", query_day(todays_day()), trailing_blank_line=True)


palette = [
        ('reversed', 'standout', ''),
        ('heading', 'bold, white', 'black'),
        ('medium', 'bold, brown', 'black'),
        ('high', 'bold, dark red', 'black'),
        ('focused_medium', 'bold, white', 'dark gray'),
        ('focused_high', 'bold, white', 'dark red'),
        ('selected_medium', 'bold, brown', 'dark blue'),
        ('selected_high', 'bold, white', 'light blue'),
        ('focused_selected_medium', 'black', 'white'),
        ('focused_selected_high', 'black', 'white'),
    ]


def build_menu(title, choices):
    this_menu = [urwid.Text(('heading',title))]
    for c in choices:
        this_menu.append(TaskWidget(c))
    return this_menu


def handle_input(key):
    if key in ('q', 'Q'):
        raise urwid.ExitMainLoop()
    elif key in ('x'):
        # mark as completed
        pass
    elif key in ('>'):
        # move later by one day
        pass
    elif key in ('<'):
        # move earlier by one day
        pass


body = []
body += build_menu(u'YESTERDAY', query_day(day(-1)))
body.append(urwid.Divider())
body += build_menu(u'TODAY', query_day(day()))
body.append(urwid.Divider())
body += build_menu(u'TOMORROW', query_day(day(1)))
main = urwid.Padding(urwid.ListBox(urwid.SimpleFocusListWalker(body)), left=0, right=0)

#top = urwid.Overlay(main, urwid.SolidFill(u'\N{MEDIUM SHADE}'),
#    align='center', width=('relative', 100),
#    valign='middle', height=('relative', 100),
#    min_width=10, min_height=9)
#urwid.MainLoop(top, palette=[('reversed', 'standout', '')]).run()
urwid.MainLoop(main, palette, unhandled_input=handle_input).run()



